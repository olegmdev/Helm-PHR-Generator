import _ from 'lodash/fp';
<% for (i = 0; i < plugins.length; i++) { %>
<% item = plugins[i] %>
import { <%= item.requestSynopsis %> } from '<%= item.duckUrl %>';
<% } %>

const generateFetchListOnMount = (fetchRequest) => {
    return {
        componentDidMount() {
            const { actions, match } = this.props;
            const userId = _.get('params.userId', match);
            if (userId) actions[fetchRequest]({ userId });
        },
        componentWillReceiveProps(nextProps) {
            const { actions, match } = this.props;
            const nextUserId = _.get('match.params.userId', nextProps);
            const userId = _.get('params.userId', match);
            if (nextUserId !== userId) {
                actions[fetchRequest]({ userId: nextUserId });
            }
        },
    }
};

const generateFetchDetailOnMount = (fetchRequest) => {
    return {
        componentDidMount() {
            const { actions, match } = this.props;
            const userId = _.get('params.userId', match);
            const sourceId = _.get('params.sourceId', match);
            if (userId && sourceId) actions[fetchRequest]({ userId, sourceId });
        },
    }
};

const generateArrayOnMount = (requestArray) => {
    return {
        componentDidMount() {
            const { actions, match } = this.props;
            const userId = _.get('params.userId', match);
            requestArray.forEach(item => {
                if (userId) actions[item]({ userId });
            });
        },
        componentWillReceiveProps(nextProps) {
            const { actions, match } = this.props;
            const nextUserId = _.get('match.params.userId', nextProps);
            const userId = _.get('params.userId', match);
            requestArray.forEach(item => {
                if (nextUserId !== userId) {
                    actions[item]({userId: nextUserId});
                }
            });
        },
    }
}

<% for (i = 0; i < plugins.length; i++) { %>
<% item = plugins[i] %>
export const <%= item.onMount %> = (generateFetchListOnMount('<%= item.request %>'));
export const <%= item.onMountDetails %> = (generateFetchDetailOnMount('<%= item.requestDetails %>'));
<% } %>


/**
 * This constant returns array of onMount's
 */
export const themeSynopsisOnMount = (generateArrayOnMount([
<% for (i = 0; i < plugins.length; i++) { %>
<% item = plugins[i] %>
    '<%= item.requestSynopsis %>',
<% } %>
]));

/**
 * This constant returns array of requests
 */
export const themeSynopsisRequests = {
<% for (i = 0; i < plugins.length; i++) { %>
<% item = plugins[i] %>
    <%= item.requestSynopsis %>,
<% } %>
};